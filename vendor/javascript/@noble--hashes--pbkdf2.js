import t from"./hmac.js";import n from"./utils.js";import"@noble/hashes/crypto";var e={};Object.defineProperty(e,"__esModule",{value:true});e.pbkdf2Async=e.pbkdf2=void 0;const s=t;const o=n;function pbkdf2Init(t,n,e,c){(0,o.assertHash)(t);const r=(0,o.checkOpts)({dkLen:32,asyncTick:10},c);const{c:a,dkLen:u,asyncTick:d}=r;(0,o.assertNumber)(a);(0,o.assertNumber)(u);(0,o.assertNumber)(d);if(a<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const p=(0,o.toBytes)(n);const f=(0,o.toBytes)(e);const i=new Uint8Array(u);const l=s.hmac.create(t,p);const b=l._cloneInto().update(f);return{c:a,dkLen:u,asyncTick:d,DK:i,PRF:l,PRFSalt:b}}function pbkdf2Output(t,n,e,s,o){t.destroy();n.destroy();s&&s.destroy();o.fill(0);return e}
/**
 * PBKDF2-HMAC: RFC 2898 key derivation function
 * @param hash - hash function that would be used e.g. sha256
 * @param password - password from which a derived key is generated
 * @param salt - cryptographic salt
 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
 */function pbkdf2(t,n,e,s){const{c:c,dkLen:r,DK:a,PRF:u,PRFSalt:d}=pbkdf2Init(t,n,e,s);let p;const f=new Uint8Array(4);const i=(0,o.createView)(f);const l=new Uint8Array(u.outputLen);for(let t=1,n=0;n<r;t++,n+=u.outputLen){const e=a.subarray(n,n+u.outputLen);i.setInt32(0,t,false);(p=d._cloneInto(p)).update(f).digestInto(l);e.set(l.subarray(0,e.length));for(let t=1;t<c;t++){u._cloneInto(p).update(l).digestInto(l);for(let t=0;t<e.length;t++)e[t]^=l[t]}}return pbkdf2Output(u,d,a,p,l)}e.pbkdf2=pbkdf2;async function pbkdf2Async(t,n,e,s){const{c:c,dkLen:r,asyncTick:a,DK:u,PRF:d,PRFSalt:p}=pbkdf2Init(t,n,e,s);let f;const i=new Uint8Array(4);const l=(0,o.createView)(i);const b=new Uint8Array(d.outputLen);for(let t=1,n=0;n<r;t++,n+=d.outputLen){const e=u.subarray(n,n+d.outputLen);l.setInt32(0,t,false);(f=p._cloneInto(f)).update(i).digestInto(b);e.set(b.subarray(0,e.length));await(0,o.asyncLoop)(c-1,a,(t=>{d._cloneInto(f).update(b).digestInto(b);for(let t=0;t<e.length;t++)e[t]^=b[t]}))}return pbkdf2Output(d,p,u,f,b)}e.pbkdf2Async=pbkdf2Async;const c=e.__esModule;const r=e.pbkdf2Async,a=e.pbkdf2;export{c as __esModule,e as default,a as pbkdf2,r as pbkdf2Async};

