import*as e from"@cosmjs/encoding";import*as t from"@cosmjs/math";import*as s from"@cosmjs/stargate";import*as n from"@cosmjs/tendermint-rpc";import*as r from"@cosmjs/utils";import*as a from"cosmjs-types/cosmwasm/wasm/v1/types";import*as o from"long";import*as i from"cosmjs-types/cosmwasm/wasm/v1/tx";import*as c from"cosmjs-types/cosmwasm/wasm/v1/query";import*as d from"@cosmjs/amino";import*as m from"@cosmjs/crypto";import*as u from"@cosmjs/proto-signing";import*as g from"cosmjs-types/cosmos/distribution/v1beta1/tx";import*as l from"cosmjs-types/cosmos/staking/v1beta1/tx";import*as f from"cosmjs-types/cosmos/tx/signing/v1beta1/signing";import*as h from"cosmjs-types/cosmos/tx/v1beta1/tx";import*as y from"pako";var p="default"in e?e.default:e;var w="default"in o?o.default:o;var C={};var b=C&&C.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(C,"__esModule",{value:true});C.cosmWasmTypes=C.createWasmAminoConverters=void 0;
/* eslint-disable @typescript-eslint/naming-convention */const v=p;const M=b(w);function createWasmAminoConverters$1(){return{"/cosmwasm.wasm.v1.MsgStoreCode":{aminoType:"wasm/MsgStoreCode",toAmino:({sender:e,wasmByteCode:t})=>({sender:e,wasm_byte_code:(0,v.toBase64)(t)}),fromAmino:({sender:e,wasm_byte_code:t})=>({sender:e,wasmByteCode:(0,v.fromBase64)(t),instantiatePermission:void 0})},"/cosmwasm.wasm.v1.MsgInstantiateContract":{aminoType:"wasm/MsgInstantiateContract",toAmino:({sender:e,codeId:t,label:s,msg:n,funds:r,admin:a})=>({sender:e,code_id:t.toString(),label:s,msg:JSON.parse((0,v.fromUtf8)(n)),funds:r,admin:a||void 0}),fromAmino:({sender:e,code_id:t,label:s,msg:n,funds:r,admin:a})=>({sender:e,codeId:M.default.fromString(t),label:s,msg:(0,v.toUtf8)(JSON.stringify(n)),funds:[...r],admin:null!==a&&void 0!==a?a:""})},"/cosmwasm.wasm.v1.MsgUpdateAdmin":{aminoType:"wasm/MsgUpdateAdmin",toAmino:({sender:e,newAdmin:t,contract:s})=>({sender:e,new_admin:t,contract:s}),fromAmino:({sender:e,new_admin:t,contract:s})=>({sender:e,newAdmin:t,contract:s})},"/cosmwasm.wasm.v1.MsgClearAdmin":{aminoType:"wasm/MsgClearAdmin",toAmino:({sender:e,contract:t})=>({sender:e,contract:t}),fromAmino:({sender:e,contract:t})=>({sender:e,contract:t})},"/cosmwasm.wasm.v1.MsgExecuteContract":{aminoType:"wasm/MsgExecuteContract",toAmino:({sender:e,contract:t,msg:s,funds:n})=>({sender:e,contract:t,msg:JSON.parse((0,v.fromUtf8)(s)),funds:n}),fromAmino:({sender:e,contract:t,msg:s,funds:n})=>({sender:e,contract:t,msg:(0,v.toUtf8)(JSON.stringify(s)),funds:[...n]})},"/cosmwasm.wasm.v1.MsgMigrateContract":{aminoType:"wasm/MsgMigrateContract",toAmino:({sender:e,contract:t,codeId:s,msg:n})=>({sender:e,contract:t,code_id:s.toString(),msg:JSON.parse((0,v.fromUtf8)(n))}),fromAmino:({sender:e,contract:t,code_id:s,msg:n})=>({sender:e,contract:t,codeId:M.default.fromString(s),msg:(0,v.toUtf8)(JSON.stringify(n))})}}}C.createWasmAminoConverters=createWasmAminoConverters$1;
/** @deprecated use `createWasmAminoConverters()` */C.cosmWasmTypes=createWasmAminoConverters$1();var E="default"in i?i.default:i;var O={};Object.defineProperty(O,"__esModule",{value:true});O.isMsgExecuteEncodeObject=O.isMsgMigrateEncodeObject=O.isMsgClearAdminEncodeObject=O.isMsgUpdateAdminEncodeObject=O.isMsgInstantiateContractEncodeObject=O.isMsgStoreCodeEncodeObject=O.wasmTypes=void 0;const A=E;O.wasmTypes=[["/cosmwasm.wasm.v1.MsgClearAdmin",A.MsgClearAdmin],["/cosmwasm.wasm.v1.MsgExecuteContract",A.MsgExecuteContract],["/cosmwasm.wasm.v1.MsgMigrateContract",A.MsgMigrateContract],["/cosmwasm.wasm.v1.MsgStoreCode",A.MsgStoreCode],["/cosmwasm.wasm.v1.MsgInstantiateContract",A.MsgInstantiateContract],["/cosmwasm.wasm.v1.MsgUpdateAdmin",A.MsgUpdateAdmin]];function isMsgStoreCodeEncodeObject$1(e){return"/cosmwasm.wasm.v1.MsgStoreCode"===e.typeUrl}O.isMsgStoreCodeEncodeObject=isMsgStoreCodeEncodeObject$1;function isMsgInstantiateContractEncodeObject$1(e){return"/cosmwasm.wasm.v1.MsgInstantiateContract"===e.typeUrl}O.isMsgInstantiateContractEncodeObject=isMsgInstantiateContractEncodeObject$1;function isMsgUpdateAdminEncodeObject$1(e){return"/cosmwasm.wasm.v1.MsgUpdateAdmin"===e.typeUrl}O.isMsgUpdateAdminEncodeObject=isMsgUpdateAdminEncodeObject$1;function isMsgClearAdminEncodeObject$1(e){return"/cosmwasm.wasm.v1.MsgClearAdmin"===e.typeUrl}O.isMsgClearAdminEncodeObject=isMsgClearAdminEncodeObject$1;function isMsgMigrateEncodeObject$1(e){return"/cosmwasm.wasm.v1.MsgMigrateContract"===e.typeUrl}O.isMsgMigrateEncodeObject=isMsgMigrateEncodeObject$1;function isMsgExecuteEncodeObject$1(e){return"/cosmwasm.wasm.v1.MsgExecuteContract"===e.typeUrl}O.isMsgExecuteEncodeObject=isMsgExecuteEncodeObject$1;var j="default"in e?e.default:e;var T="default"in s?s.default:s;var x="default"in c?c.default:c;var S="default"in o?o.default:o;var I={};var U=I&&I.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(I,"__esModule",{value:true});I.setupWasmExtension=void 0;const W=j;const P=T;const _=x;const B=U(S);function setupWasmExtension$1(e){const t=(0,P.createProtobufRpcClient)(e);const s=new _.QueryClientImpl(t);return{wasm:{listCodeInfo:async e=>{const t={pagination:(0,P.createPagination)(e)};return s.Codes(t)},getCode:async e=>{const t={codeId:B.default.fromNumber(e)};return s.Code(t)},listContractsByCodeId:async(e,t)=>{const n={codeId:B.default.fromNumber(e),pagination:(0,P.createPagination)(t)};return s.ContractsByCode(n)},getContractInfo:async e=>{const t={address:e};return s.ContractInfo(t)},getContractCodeHistory:async(e,t)=>{const n={address:e,pagination:(0,P.createPagination)(t)};return s.ContractHistory(n)},getAllContractState:async(e,t)=>{const n={address:e,pagination:(0,P.createPagination)(t)};return s.AllContractState(n)},queryContractRaw:async(e,t)=>{const n={address:e,queryData:t};return s.RawContractState(n)},queryContractSmart:async(e,t)=>{const n={address:e,queryData:(0,W.toAscii)(JSON.stringify(t))};const{data:r}=await s.SmartContractState(n);let a;try{a=(0,W.fromUtf8)(r)}catch(e){throw new Error(`Could not UTF-8 decode smart query response from contract: ${e}`)}try{return JSON.parse(a)}catch(e){throw new Error(`Could not JSON parse smart query response from contract: ${e}`)}}}}}I.setupWasmExtension=setupWasmExtension$1;var N={};Object.defineProperty(N,"__esModule",{value:true});N.setupWasmExtension=N.wasmTypes=N.isMsgUpdateAdminEncodeObject=N.isMsgStoreCodeEncodeObject=N.isMsgMigrateEncodeObject=N.isMsgInstantiateContractEncodeObject=N.isMsgExecuteEncodeObject=N.isMsgClearAdminEncodeObject=N.createWasmAminoConverters=N.cosmWasmTypes=void 0;var k=C;Object.defineProperty(N,"cosmWasmTypes",{enumerable:true,get:function(){return k.cosmWasmTypes}});Object.defineProperty(N,"createWasmAminoConverters",{enumerable:true,get:function(){return k.createWasmAminoConverters}});var $=O;Object.defineProperty(N,"isMsgClearAdminEncodeObject",{enumerable:true,get:function(){return $.isMsgClearAdminEncodeObject}});Object.defineProperty(N,"isMsgExecuteEncodeObject",{enumerable:true,get:function(){return $.isMsgExecuteEncodeObject}});Object.defineProperty(N,"isMsgInstantiateContractEncodeObject",{enumerable:true,get:function(){return $.isMsgInstantiateContractEncodeObject}});Object.defineProperty(N,"isMsgMigrateEncodeObject",{enumerable:true,get:function(){return $.isMsgMigrateEncodeObject}});Object.defineProperty(N,"isMsgStoreCodeEncodeObject",{enumerable:true,get:function(){return $.isMsgStoreCodeEncodeObject}});Object.defineProperty(N,"isMsgUpdateAdminEncodeObject",{enumerable:true,get:function(){return $.isMsgUpdateAdminEncodeObject}});Object.defineProperty(N,"wasmTypes",{enumerable:true,get:function(){return $.wasmTypes}});var D=I;Object.defineProperty(N,"setupWasmExtension",{enumerable:true,get:function(){return D.setupWasmExtension}});var R="default"in e?e.default:e;var H="default"in t?t.default:t;var q="default"in s?s.default:s;var G="default"in n?n.default:n;var Q="default"in r?r.default:r;var F="default"in a?a.default:a;var L={};Object.defineProperty(L,"__esModule",{value:true});L.CosmWasmClient=void 0;
/* eslint-disable @typescript-eslint/naming-convention */const J=R;const Y=H;const z=q;const K=G;const X=Q;const V=F;const Z=N;class CosmWasmClient$1{constructor(e){this.codesCache=new Map;if(e){this.tmClient=e;this.queryClient=z.QueryClient.withExtensions(e,z.setupAuthExtension,z.setupBankExtension,Z.setupWasmExtension,z.setupTxExtension)}}static async connect(e){const t=await K.Tendermint34Client.connect(e);return new CosmWasmClient$1(t)}getTmClient(){return this.tmClient}forceGetTmClient(){if(!this.tmClient)throw new Error("Tendermint client not available. You cannot use online functionality in offline mode.");return this.tmClient}getQueryClient(){return this.queryClient}forceGetQueryClient(){if(!this.queryClient)throw new Error("Query client not available. You cannot use online functionality in offline mode.");return this.queryClient}async getChainId(){if(!this.chainId){const e=await this.forceGetTmClient().status();const t=e.nodeInfo.network;if(!t)throw new Error("Chain ID must not be empty");this.chainId=t}return this.chainId}async getHeight(){const e=await this.forceGetTmClient().status();return e.syncInfo.latestBlockHeight}async getAccount(e){try{const t=await this.forceGetQueryClient().auth.account(e);return t?(0,z.accountFromAny)(t):null}catch(e){if(/rpc error: code = NotFound/i.test(e.toString()))return null;throw e}}async getSequence(e){const t=await this.getAccount(e);if(!t)throw new Error("Account does not exist on chain. Send some tokens there before trying to query sequence.");return{accountNumber:t.accountNumber,sequence:t.sequence}}async getBlock(e){const t=await this.forceGetTmClient().block(e);return{id:(0,J.toHex)(t.blockId.hash).toUpperCase(),header:{version:{block:new Y.Uint53(t.block.header.version.block).toString(),app:new Y.Uint53(t.block.header.version.app).toString()},height:t.block.header.height,chainId:t.block.header.chainId,time:(0,K.toRfc3339WithNanoseconds)(t.block.header.time)},txs:t.block.txs}}async getBalance(e,t){return this.forceGetQueryClient().bank.balance(e,t)}async getTx(e){var t;const s=await this.txsQuery(`tx.hash='${e}'`);return null!==(t=s[0])&&void 0!==t?t:null}async searchTx(e,t={}){const s=t.minHeight||0;const n=t.maxHeight||Number.MAX_SAFE_INTEGER;if(n<s)return[];function withFilters(e){return`${e} AND tx.height>=${s} AND tx.height<=${n}`}let r;if((0,z.isSearchByHeightQuery)(e))r=e.height>=s&&e.height<=n?await this.txsQuery(`tx.height=${e.height}`):[];else if((0,z.isSearchBySentFromOrToQuery)(e)){const t=withFilters(`message.module='bank' AND transfer.sender='${e.sentFromOrTo}'`);const s=withFilters(`message.module='bank' AND transfer.recipient='${e.sentFromOrTo}'`);const[n,a]=await Promise.all([t,s].map((e=>this.txsQuery(e))));const o=n.map((e=>e.hash));r=[...n,...a.filter((e=>!o.includes(e.hash)))]}else{if(!(0,z.isSearchByTagsQuery)(e))throw new Error("Unknown query type");{const t=withFilters(e.tags.map((e=>`${e.key}='${e.value}'`)).join(" AND "));r=await this.txsQuery(t)}}const a=r.filter((e=>e.height>=s&&e.height<=n));return a}disconnect(){this.tmClient&&this.tmClient.disconnect()}async broadcastTx(e,t=6e4,s=3e3){let n=false;const r=setTimeout((()=>{n=true}),t);const pollForTx=async e=>{if(n)throw new z.TimeoutError(`Transaction with ID ${e} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${t/1e4} seconds.`,e);await(0,X.sleep)(s);const r=await this.getTx(e);return r?{code:r.code,height:r.height,rawLog:r.rawLog,transactionHash:e,gasUsed:r.gasUsed,gasWanted:r.gasWanted}:pollForTx(e)};const a=await this.forceGetTmClient().broadcastTxSync({tx:e});if(a.code)throw new Error(`Broadcasting transaction failed with code ${a.code} (codespace: ${a.codeSpace}). Log: ${a.log}`);const o=(0,J.toHex)(a.hash).toUpperCase();return new Promise(((e,t)=>pollForTx(o).then((t=>{clearTimeout(r);e(t)}),(e=>{clearTimeout(r);t(e)}))))}async getCodes(){const e=[];let t;do{const{codeInfos:s,pagination:n}=await this.forceGetQueryClient().wasm.listCodeInfo(t);const r=s||[];e.push(...r);t=null===n||void 0===n?void 0:n.nextKey}while(0!==(null===t||void 0===t?void 0:t.length));return e.map((e=>{(0,X.assert)(e.creator&&e.codeId&&e.dataHash,"entry incomplete");return{id:e.codeId.toNumber(),creator:e.creator,checksum:(0,J.toHex)(e.dataHash)}}))}async getCodeDetails(e){const t=this.codesCache.get(e);if(t)return t;const{codeInfo:s,data:n}=await this.forceGetQueryClient().wasm.getCode(e);(0,X.assert)(s&&s.codeId&&s.creator&&s.dataHash&&n,"codeInfo missing or incomplete");const r={id:s.codeId.toNumber(),creator:s.creator,checksum:(0,J.toHex)(s.dataHash),data:n};this.codesCache.set(e,r);return r}async getContracts(e){const t=[];let s;do{const{contracts:n,pagination:r}=await this.forceGetQueryClient().wasm.listContractsByCodeId(e,s);const a=n||[];t.push(...a);s=null===r||void 0===r?void 0:r.nextKey}while(0!==(null===s||void 0===s?void 0:s.length)&&void 0!==s);return t}async getContract(e){const{address:t,contractInfo:s}=await this.forceGetQueryClient().wasm.getContractInfo(e);if(!s)throw new Error(`No contract found at address "${e}"`);(0,X.assert)(t,"address missing");(0,X.assert)(s.codeId&&s.creator&&s.label,"contractInfo incomplete");return{address:t,codeId:s.codeId.toNumber(),creator:s.creator,admin:s.admin||void 0,label:s.label,ibcPortId:s.ibcPortId||void 0}}async getContractCodeHistory(e){const t=await this.forceGetQueryClient().wasm.getContractCodeHistory(e);if(!t)throw new Error(`No contract history found for address "${e}"`);const s={[V.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT]:"Init",[V.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS]:"Genesis",[V.ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE]:"Migrate"};return(t.entries||[]).map((e=>{(0,X.assert)(e.operation&&e.codeId&&e.msg);return{operation:s[e.operation],codeId:e.codeId.toNumber(),msg:JSON.parse((0,J.fromAscii)(e.msg))}}))}async queryContractRaw(e,t){await this.getContract(e);const{data:s}=await this.forceGetQueryClient().wasm.queryContractRaw(e,t);return null!==s&&void 0!==s?s:null}async queryContractSmart(e,t){try{return await this.forceGetQueryClient().wasm.queryContractSmart(e,t)}catch(t){throw t instanceof Error&&t.message.startsWith("not found: contract")?new Error(`No contract found at address "${e}"`):t}}async txsQuery(e){const t=await this.forceGetTmClient().txSearchAll({query:e});return t.txs.map((e=>({height:e.height,hash:(0,J.toHex)(e.hash).toUpperCase(),code:e.result.code,rawLog:e.result.log||"",tx:e.tx,gasUsed:e.result.gasUsed,gasWanted:e.result.gasWanted})))}}L.CosmWasmClient=CosmWasmClient$1;var ee="default"in e?e.default:e;var te={};Object.defineProperty(te,"__esModule",{value:true});te.fromBinary=te.toBinary=void 0;const se=ee;function toBinary$1(e){return(0,se.toBase64)((0,se.toUtf8)(JSON.stringify(e)))}te.toBinary=toBinary$1;function fromBinary$1(e){return JSON.parse((0,se.fromUtf8)((0,se.fromBase64)(e)))}te.fromBinary=fromBinary$1;var ne="default"in d?d.default:d;var re="default"in m?m.default:m;var ae="default"in e?e.default:e;var oe="default"in t?t.default:t;var ie="default"in u?u.default:u;var ce="default"in s?s.default:s;var de="default"in n?n.default:n;var me="default"in r?r.default:r;var ue="default"in g?g.default:g;var ge="default"in l?l.default:l;var le="default"in f?f.default:f;var fe="default"in h?h.default:h;var he="default"in i?i.default:i;var ye="default"in o?o.default:o;var pe="default"in y?y.default:y;var we={};var Ce=we&&we.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(we,"__esModule",{value:true});we.SigningCosmWasmClient=void 0;
/* eslint-disable @typescript-eslint/naming-convention */const be=ne;const ve=re;const Me=ae;const Ee=oe;const Oe=ie;const Ae=ce;const je=de;const Te=me;const xe=ue;const Se=ge;const Ie=le;const Ue=fe;const We=he;const Pe=Ce(ye);const _e=Ce(pe);const Be=L;const Ne=N;function createDeliverTxResponseErrorMessage(e){return`Error when broadcasting tx ${e.transactionHash} at height ${e.height}. Code: ${e.code}; Raw log: ${e.rawLog}`}function createDefaultRegistry(){return new Oe.Registry([...Ae.defaultRegistryTypes,...Ne.wasmTypes])}class SigningCosmWasmClient$1 extends Be.CosmWasmClient{constructor(e,t,s){super(e);const{registry:n=createDefaultRegistry(),aminoTypes:r=new Ae.AminoTypes({...(0,Ne.createWasmAminoConverters)(),...(0,Ae.createBankAminoConverters)()})}=s;this.registry=n;this.aminoTypes=r;this.signer=t;this.broadcastTimeoutMs=s.broadcastTimeoutMs;this.broadcastPollIntervalMs=s.broadcastPollIntervalMs;this.gasPrice=s.gasPrice}static async connectWithSigner(e,t,s={}){const n=await je.Tendermint34Client.connect(e);return new SigningCosmWasmClient$1(n,t,s)}static async offline(e,t={}){return new SigningCosmWasmClient$1(void 0,e,t)}async simulate(e,t,s){const n=t.map((e=>this.registry.encodeAsAny(e)));const r=(await this.signer.getAccounts()).find((t=>t.address===e));if(!r)throw new Error("Failed to retrieve account from signer");const a=(0,be.encodeSecp256k1Pubkey)(r.pubkey);const{sequence:o}=await this.getSequence(e);const{gasInfo:i}=await this.forceGetQueryClient().tx.simulate(n,s,a,o);(0,Te.assertDefined)(i);return Ee.Uint53.fromString(i.gasUsed.toString()).toNumber()}async upload(e,t,s,n=""){const r=_e.default.gzip(t,{level:9});const a={typeUrl:"/cosmwasm.wasm.v1.MsgStoreCode",value:We.MsgStoreCode.fromPartial({sender:e,wasmByteCode:r})};const o=await this.signAndBroadcast(e,[a],s,n);if((0,Ae.isDeliverTxFailure)(o))throw new Error(createDeliverTxResponseErrorMessage(o));const i=Ae.logs.parseRawLog(o.rawLog);const c=Ae.logs.findAttribute(i,"store_code","code_id");return{originalSize:t.length,originalChecksum:(0,Me.toHex)((0,ve.sha256)(t)),compressedSize:r.length,compressedChecksum:(0,Me.toHex)((0,ve.sha256)(r)),codeId:Number.parseInt(c.value,10),logs:i,height:o.height,transactionHash:o.transactionHash,gasWanted:o.gasWanted,gasUsed:o.gasUsed}}async instantiate(e,t,s,n,r,a={}){const o={typeUrl:"/cosmwasm.wasm.v1.MsgInstantiateContract",value:We.MsgInstantiateContract.fromPartial({sender:e,codeId:Pe.default.fromString(new Ee.Uint53(t).toString()),label:n,msg:(0,Me.toUtf8)(JSON.stringify(s)),funds:[...a.funds||[]],admin:a.admin})};const i=await this.signAndBroadcast(e,[o],r,a.memo);if((0,Ae.isDeliverTxFailure)(i))throw new Error(createDeliverTxResponseErrorMessage(i));const c=Ae.logs.parseRawLog(i.rawLog);const d=Ae.logs.findAttribute(c,"instantiate","_contract_address");return{contractAddress:d.value,logs:c,height:i.height,transactionHash:i.transactionHash,gasWanted:i.gasWanted,gasUsed:i.gasUsed}}async updateAdmin(e,t,s,n,r=""){const a={typeUrl:"/cosmwasm.wasm.v1.MsgUpdateAdmin",value:We.MsgUpdateAdmin.fromPartial({sender:e,contract:t,newAdmin:s})};const o=await this.signAndBroadcast(e,[a],n,r);if((0,Ae.isDeliverTxFailure)(o))throw new Error(createDeliverTxResponseErrorMessage(o));return{logs:Ae.logs.parseRawLog(o.rawLog),height:o.height,transactionHash:o.transactionHash,gasWanted:o.gasWanted,gasUsed:o.gasUsed}}async clearAdmin(e,t,s,n=""){const r={typeUrl:"/cosmwasm.wasm.v1.MsgClearAdmin",value:We.MsgClearAdmin.fromPartial({sender:e,contract:t})};const a=await this.signAndBroadcast(e,[r],s,n);if((0,Ae.isDeliverTxFailure)(a))throw new Error(createDeliverTxResponseErrorMessage(a));return{logs:Ae.logs.parseRawLog(a.rawLog),height:a.height,transactionHash:a.transactionHash,gasWanted:a.gasWanted,gasUsed:a.gasUsed}}async migrate(e,t,s,n,r,a=""){const o={typeUrl:"/cosmwasm.wasm.v1.MsgMigrateContract",value:We.MsgMigrateContract.fromPartial({sender:e,contract:t,codeId:Pe.default.fromString(new Ee.Uint53(s).toString()),msg:(0,Me.toUtf8)(JSON.stringify(n))})};const i=await this.signAndBroadcast(e,[o],r,a);if((0,Ae.isDeliverTxFailure)(i))throw new Error(createDeliverTxResponseErrorMessage(i));return{logs:Ae.logs.parseRawLog(i.rawLog),height:i.height,transactionHash:i.transactionHash,gasWanted:i.gasWanted,gasUsed:i.gasUsed}}async execute(e,t,s,n,r="",a){const o={typeUrl:"/cosmwasm.wasm.v1.MsgExecuteContract",value:We.MsgExecuteContract.fromPartial({sender:e,contract:t,msg:(0,Me.toUtf8)(JSON.stringify(s)),funds:[...a||[]]})};const i=await this.signAndBroadcast(e,[o],n,r);if((0,Ae.isDeliverTxFailure)(i))throw new Error(createDeliverTxResponseErrorMessage(i));return{logs:Ae.logs.parseRawLog(i.rawLog),height:i.height,transactionHash:i.transactionHash,gasWanted:i.gasWanted,gasUsed:i.gasUsed}}async sendTokens(e,t,s,n,r=""){const a={typeUrl:"/cosmos.bank.v1beta1.MsgSend",value:{fromAddress:e,toAddress:t,amount:[...s]}};return this.signAndBroadcast(e,[a],n,r)}async delegateTokens(e,t,s,n,r=""){const a={typeUrl:"/cosmos.staking.v1beta1.MsgDelegate",value:Se.MsgDelegate.fromPartial({delegatorAddress:e,validatorAddress:t,amount:s})};return this.signAndBroadcast(e,[a],n,r)}async undelegateTokens(e,t,s,n,r=""){const a={typeUrl:"/cosmos.staking.v1beta1.MsgUndelegate",value:Se.MsgUndelegate.fromPartial({delegatorAddress:e,validatorAddress:t,amount:s})};return this.signAndBroadcast(e,[a],n,r)}async withdrawRewards(e,t,s,n=""){const r={typeUrl:"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",value:xe.MsgWithdrawDelegatorReward.fromPartial({delegatorAddress:e,validatorAddress:t})};return this.signAndBroadcast(e,[r],s,n)}
/**
   * Creates a transaction with the given messages, fee and memo. Then signs and broadcasts the transaction.
   *
   * @param signerAddress The address that will sign transactions using this instance. The signer must be able to sign with this address.
   * @param messages
   * @param fee
   * @param memo
   */async signAndBroadcast(e,t,s,n=""){let r;if("auto"==s||"number"===typeof s){(0,Te.assertDefined)(this.gasPrice,"Gas price must be set in the client options when auto gas is used.");const a=await this.simulate(e,t,n);const o="number"===typeof s?s:1.3;r=(0,Ae.calculateFee)(Math.round(a*o),this.gasPrice)}else r=s;const a=await this.sign(e,t,r,n);const o=Ue.TxRaw.encode(a).finish();return this.broadcastTx(o,this.broadcastTimeoutMs,this.broadcastPollIntervalMs)}async sign(e,t,s,n,r){let a;if(r)a=r;else{const{accountNumber:t,sequence:s}=await this.getSequence(e);const n=await this.getChainId();a={accountNumber:t,sequence:s,chainId:n}}return(0,Oe.isOfflineDirectSigner)(this.signer)?this.signDirect(e,t,s,n,a):this.signAmino(e,t,s,n,a)}async signAmino(e,t,s,n,{accountNumber:r,sequence:a,chainId:o}){(0,Te.assert)(!(0,Oe.isOfflineDirectSigner)(this.signer));const i=(await this.signer.getAccounts()).find((t=>t.address===e));if(!i)throw new Error("Failed to retrieve account from signer");const c=(0,Oe.encodePubkey)((0,be.encodeSecp256k1Pubkey)(i.pubkey));const d=Ie.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;const m=t.map((e=>this.aminoTypes.toAmino(e)));const u=(0,be.makeSignDoc)(m,s,o,n,r,a);const{signature:g,signed:l}=await this.signer.signAmino(e,u);const f={typeUrl:"/cosmos.tx.v1beta1.TxBody",value:{messages:l.msgs.map((e=>this.aminoTypes.fromAmino(e))),memo:l.memo}};const h=this.registry.encode(f);const y=Ee.Int53.fromString(l.fee.gas).toNumber();const p=Ee.Int53.fromString(l.sequence).toNumber();const w=(0,Oe.makeAuthInfoBytes)([{pubkey:c,sequence:p}],l.fee.amount,y,d);return Ue.TxRaw.fromPartial({bodyBytes:h,authInfoBytes:w,signatures:[(0,Me.fromBase64)(g.signature)]})}async signDirect(e,t,s,n,{accountNumber:r,sequence:a,chainId:o}){(0,Te.assert)((0,Oe.isOfflineDirectSigner)(this.signer));const i=(await this.signer.getAccounts()).find((t=>t.address===e));if(!i)throw new Error("Failed to retrieve account from signer");const c=(0,Oe.encodePubkey)((0,be.encodeSecp256k1Pubkey)(i.pubkey));const d={typeUrl:"/cosmos.tx.v1beta1.TxBody",value:{messages:t,memo:n}};const m=this.registry.encode(d);const u=Ee.Int53.fromString(s.gas).toNumber();const g=(0,Oe.makeAuthInfoBytes)([{pubkey:c,sequence:a}],s.amount,u);const l=(0,Oe.makeSignDoc)(m,g,o,r);const{signature:f,signed:h}=await this.signer.signDirect(e,l);return Ue.TxRaw.fromPartial({bodyBytes:h.bodyBytes,authInfoBytes:h.authInfoBytes,signatures:[(0,Me.fromBase64)(f.signature)]})}}we.SigningCosmWasmClient=SigningCosmWasmClient$1;var ke={};Object.defineProperty(ke,"__esModule",{value:true});ke.SigningCosmWasmClient=ke.setupWasmExtension=ke.isMsgUpdateAdminEncodeObject=ke.isMsgStoreCodeEncodeObject=ke.isMsgMigrateEncodeObject=ke.isMsgInstantiateContractEncodeObject=ke.isMsgExecuteEncodeObject=ke.isMsgClearAdminEncodeObject=ke.createWasmAminoConverters=ke.cosmWasmTypes=ke.toBinary=ke.fromBinary=ke.CosmWasmClient=void 0;var $e=L;Object.defineProperty(ke,"CosmWasmClient",{enumerable:true,get:function(){return $e.CosmWasmClient}});var De=te;Object.defineProperty(ke,"fromBinary",{enumerable:true,get:function(){return De.fromBinary}});Object.defineProperty(ke,"toBinary",{enumerable:true,get:function(){return De.toBinary}});var Re=N;Object.defineProperty(ke,"cosmWasmTypes",{enumerable:true,get:function(){return Re.cosmWasmTypes}});Object.defineProperty(ke,"createWasmAminoConverters",{enumerable:true,get:function(){return Re.createWasmAminoConverters}});Object.defineProperty(ke,"isMsgClearAdminEncodeObject",{enumerable:true,get:function(){return Re.isMsgClearAdminEncodeObject}});Object.defineProperty(ke,"isMsgExecuteEncodeObject",{enumerable:true,get:function(){return Re.isMsgExecuteEncodeObject}});Object.defineProperty(ke,"isMsgInstantiateContractEncodeObject",{enumerable:true,get:function(){return Re.isMsgInstantiateContractEncodeObject}});Object.defineProperty(ke,"isMsgMigrateEncodeObject",{enumerable:true,get:function(){return Re.isMsgMigrateEncodeObject}});Object.defineProperty(ke,"isMsgStoreCodeEncodeObject",{enumerable:true,get:function(){return Re.isMsgStoreCodeEncodeObject}});Object.defineProperty(ke,"isMsgUpdateAdminEncodeObject",{enumerable:true,get:function(){return Re.isMsgUpdateAdminEncodeObject}});Object.defineProperty(ke,"setupWasmExtension",{enumerable:true,get:function(){return Re.setupWasmExtension}});var He=we;Object.defineProperty(ke,"SigningCosmWasmClient",{enumerable:true,get:function(){return He.SigningCosmWasmClient}});const qe=ke.__esModule,Ge=ke.SigningCosmWasmClient,Qe=ke.setupWasmExtension,Fe=ke.isMsgUpdateAdminEncodeObject,Le=ke.isMsgStoreCodeEncodeObject,Je=ke.isMsgMigrateEncodeObject,Ye=ke.isMsgInstantiateContractEncodeObject,ze=ke.isMsgExecuteEncodeObject,Ke=ke.isMsgClearAdminEncodeObject,Xe=ke.createWasmAminoConverters,Ve=ke.cosmWasmTypes,Ze=ke.toBinary,et=ke.fromBinary,tt=ke.CosmWasmClient;export{tt as CosmWasmClient,Ge as SigningCosmWasmClient,qe as __esModule,Ve as cosmWasmTypes,Xe as createWasmAminoConverters,ke as default,et as fromBinary,Ke as isMsgClearAdminEncodeObject,ze as isMsgExecuteEncodeObject,Ye as isMsgInstantiateContractEncodeObject,Je as isMsgMigrateEncodeObject,Le as isMsgStoreCodeEncodeObject,Fe as isMsgUpdateAdminEncodeObject,Qe as setupWasmExtension,Ze as toBinary};

