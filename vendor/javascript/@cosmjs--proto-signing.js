import*as e from"@cosmjs/math";import*as t from"cosmjs-types/cosmos/tx/v1beta1/tx";import{e as r,a as o}from"../_/6c8dae4c.js";import*as n from"@cosmjs/amino";import*as s from"@cosmjs/crypto";import*as i from"@cosmjs/encoding";import*as a from"cosmjs-types/cosmos/crypto/multisig/keys";import*as c from"cosmjs-types/cosmos/crypto/secp256k1/keys";import*as u from"cosmjs-types/google/protobuf/any";import*as d from"cosmjs-types/cosmos/bank/v1beta1/tx";import*as y from"cosmjs-types/cosmos/base/v1beta1/coin";import l from"buffer";import f from"./wallet.js";import"@cosmjs/utils";import"cosmjs-types/cosmos/tx/signing/v1beta1/signing";import"long";var p="default"in e?e.default:e;var m={};Object.defineProperty(m,"__esModule",{value:true});m.parseCoins=void 0;const b=p;function parseCoins$1(e){return e.replace(/\s/g,"").split(",").filter(Boolean).map((e=>{const t=e.match(/^([0-9]+)([a-zA-Z][a-zA-Z0-9/]{2,127})$/);if(!t)throw new Error("Got an invalid coin string");return{amount:b.Uint64.fromString(t[1]).toString(),denom:t[2]}}))}m.parseCoins=parseCoins$1;var g="default"in t?t.default:t;var P={};Object.defineProperty(P,"__esModule",{value:true});P.decodeTxRaw=void 0;const k=g;function decodeTxRaw$1(e){const t=k.TxRaw.decode(e);return{authInfo:k.AuthInfo.decode(t.authInfoBytes),body:k.TxBody.decode(t.bodyBytes),signatures:t.signatures}}P.decodeTxRaw=decodeTxRaw$1;var h="default"in n?n.default:n;var v="default"in s?s.default:s;var T="default"in i?i.default:i;var j={};Object.defineProperty(j,"__esModule",{value:true});j.DirectSecp256k1Wallet=void 0;const S=h;const x=v;const O=T;const w=r;class DirectSecp256k1Wallet$1{constructor(e,t,r){this.privkey=e;this.pubkey=t;this.prefix=r}
/**
   * Creates a DirectSecp256k1Wallet from the given private key
   *
   * @param privkey The private key.
   * @param prefix The bech32 address prefix (human readable part). Defaults to "cosmos".
   */static async fromKey(e,t="cosmos"){const r=(await x.Secp256k1.makeKeypair(e)).pubkey;return new DirectSecp256k1Wallet$1(e,x.Secp256k1.compressPubkey(r),t)}get address(){return(0,O.toBech32)(this.prefix,(0,S.rawSecp256k1PubkeyToRawAddress)(this.pubkey))}async getAccounts(){return[{algo:"secp256k1",address:this.address,pubkey:this.pubkey}]}async signDirect(e,t){const r=(0,w.makeSignBytes)(t);if(e!==this.address)throw new Error(`Address ${e} not found in wallet`);const o=(0,x.sha256)(r);const n=await x.Secp256k1.createSignature(o,this.privkey);const s=new Uint8Array([...n.r(32),...n.s(32)]);const i=(0,S.encodeSecp256k1Signature)(this.pubkey,s);return{signed:t,signature:i}}}j.DirectSecp256k1Wallet=DirectSecp256k1Wallet$1;var B="default"in s?s.default:s;var $={};Object.defineProperty($,"__esModule",{value:true});$.makeCosmoshubPath=void 0;const A=B;function makeCosmoshubPath$1(e){return[A.Slip10RawIndex.hardened(44),A.Slip10RawIndex.hardened(118),A.Slip10RawIndex.hardened(0),A.Slip10RawIndex.normal(0),A.Slip10RawIndex.normal(e)]}$.makeCosmoshubPath=makeCosmoshubPath$1;var D="default"in n?n.default:n;var C="default"in i?i.default:i;var K="default"in e?e.default:e;var R="default"in a?a.default:a;var _="default"in c?c.default:c;var E="default"in u?u.default:u;var U={};Object.defineProperty(U,"__esModule",{value:true});U.decodePubkey=U.encodePubkey=void 0;
/* eslint-disable @typescript-eslint/naming-convention */const G=D;const M=C;const W=K;const I=R;const z=_;const L=E;function encodePubkey$1(e){if((0,G.isSecp256k1Pubkey)(e)){const t=z.PubKey.fromPartial({key:(0,M.fromBase64)(e.value)});return L.Any.fromPartial({typeUrl:"/cosmos.crypto.secp256k1.PubKey",value:Uint8Array.from(z.PubKey.encode(t).finish())})}if((0,G.isMultisigThresholdPubkey)(e)){const t=I.LegacyAminoPubKey.fromPartial({threshold:W.Uint53.fromString(e.value.threshold).toNumber(),publicKeys:e.value.pubkeys.map(encodePubkey$1)});return L.Any.fromPartial({typeUrl:"/cosmos.crypto.multisig.LegacyAminoPubKey",value:Uint8Array.from(I.LegacyAminoPubKey.encode(t).finish())})}throw new Error(`Pubkey type ${e.type} not recognized`)}U.encodePubkey=encodePubkey$1;function decodeSinglePubkey(e){switch(e.typeUrl){case"/cosmos.crypto.secp256k1.PubKey":{const{key:t}=z.PubKey.decode(e.value);return(0,G.encodeSecp256k1Pubkey)(t)}default:throw new Error(`Pubkey type_url ${e.typeUrl} not recognized as single public key type`)}}function decodePubkey$1(e){if(!e||!e.value)return null;switch(e.typeUrl){case"/cosmos.crypto.secp256k1.PubKey":return decodeSinglePubkey(e);case"/cosmos.crypto.multisig.LegacyAminoPubKey":{const{threshold:t,publicKeys:r}=I.LegacyAminoPubKey.decode(e.value);const o={type:"tendermint/PubKeyMultisigThreshold",value:{threshold:t.toString(),pubkeys:r.map(decodeSinglePubkey)}};return o}default:throw new Error(`Pubkey type_url ${e.typeUrl} not recognized`)}}U.decodePubkey=decodePubkey$1;var H="default"in d?d.default:d;var Z="default"in y?y.default:y;var N="default"in t?t.default:t;var q="default"in u?u.default:u;var F={};var J=l.Buffer;Object.defineProperty(F,"__esModule",{value:true});F.Registry=F.isTxBodyEncodeObject=F.isPbjsGeneratedType=F.isTsProtoGeneratedType=void 0;
/* eslint-disable @typescript-eslint/naming-convention */const Q=H;const V=Z;const X=N;const Y=q;function isTsProtoGeneratedType$1(e){return"function"===typeof e.fromPartial}F.isTsProtoGeneratedType=isTsProtoGeneratedType$1;function isPbjsGeneratedType$1(e){return!isTsProtoGeneratedType$1(e)}F.isPbjsGeneratedType=isPbjsGeneratedType$1;const ee={cosmosCoin:"/cosmos.base.v1beta1.Coin",cosmosMsgSend:"/cosmos.bank.v1beta1.MsgSend",cosmosTxBody:"/cosmos.tx.v1beta1.TxBody",googleAny:"/google.protobuf.Any"};function isTxBodyEncodeObject$1(e){return"/cosmos.tx.v1beta1.TxBody"===e.typeUrl}F.isTxBodyEncodeObject=isTxBodyEncodeObject$1;class Registry$1{constructor(e){const{cosmosCoin:t,cosmosMsgSend:r}=ee;this.types=e?new Map([...e]):new Map([[t,V.Coin],[r,Q.MsgSend]])}register(e,t){this.types.set(e,t)}lookupType(e){return this.types.get(e)}lookupTypeWithError(e){const t=this.lookupType(e);if(!t)throw new Error(`Unregistered type url: ${e}`);return t}encode(e){const{value:t,typeUrl:r}=e;if(isTxBodyEncodeObject$1(e))return this.encodeTxBody(t);const o=this.lookupTypeWithError(r);const n=isTsProtoGeneratedType$1(o)?o.fromPartial(t):o.create(t);return o.encode(n).finish()}encodeAsAny(e){const t=this.encode(e);return Y.Any.fromPartial({typeUrl:e.typeUrl,value:t})}encodeTxBody(e){const t=e.messages.map((e=>this.encodeAsAny(e)));const r=X.TxBody.fromPartial({...e,messages:t});return X.TxBody.encode(r).finish()}decode({typeUrl:e,value:t}){if(e===ee.cosmosTxBody)return this.decodeTxBody(t);const r=this.lookupTypeWithError(e);const o=r.decode(t);Object.entries(o).forEach((([e,t])=>{"undefined"!==typeof J&&"undefined"!==typeof J.isBuffer&&J.isBuffer(t)&&(o[e]=Uint8Array.from(t))}));return o}decodeTxBody(e){const t=X.TxBody.decode(e);return{...t,messages:t.messages.map((({typeUrl:e,value:t})=>{if(!e)throw new Error("Missing type_url in Any");if(!t)throw new Error("Missing value in Any");return this.decode({typeUrl:e,value:t})}))}}}F.Registry=Registry$1;var te={};Object.defineProperty(te,"__esModule",{value:true});te.isOfflineDirectSigner=void 0;function isOfflineDirectSigner$1(e){return void 0!==e.signDirect}te.isOfflineDirectSigner=isOfflineDirectSigner$1;var re="default"in n?n.default:n;var oe={};Object.defineProperty(oe,"__esModule",{value:true});oe.coins=oe.coin=oe.executeKdf=oe.makeSignDoc=oe.makeSignBytes=oe.makeAuthInfoBytes=oe.isOfflineDirectSigner=oe.Registry=oe.isTxBodyEncodeObject=oe.isTsProtoGeneratedType=oe.isPbjsGeneratedType=oe.encodePubkey=oe.decodePubkey=oe.makeCosmoshubPath=oe.DirectSecp256k1Wallet=oe.extractKdfConfiguration=oe.DirectSecp256k1HdWallet=oe.decodeTxRaw=oe.parseCoins=void 0;var ne=m;Object.defineProperty(oe,"parseCoins",{enumerable:true,get:function(){return ne.parseCoins}});var se=P;Object.defineProperty(oe,"decodeTxRaw",{enumerable:true,get:function(){return se.decodeTxRaw}});var ie=o;Object.defineProperty(oe,"DirectSecp256k1HdWallet",{enumerable:true,get:function(){return ie.DirectSecp256k1HdWallet}});Object.defineProperty(oe,"extractKdfConfiguration",{enumerable:true,get:function(){return ie.extractKdfConfiguration}});var ae=j;Object.defineProperty(oe,"DirectSecp256k1Wallet",{enumerable:true,get:function(){return ae.DirectSecp256k1Wallet}});var ce=$;Object.defineProperty(oe,"makeCosmoshubPath",{enumerable:true,get:function(){return ce.makeCosmoshubPath}});var ue=U;Object.defineProperty(oe,"decodePubkey",{enumerable:true,get:function(){return ue.decodePubkey}});Object.defineProperty(oe,"encodePubkey",{enumerable:true,get:function(){return ue.encodePubkey}});var de=F;Object.defineProperty(oe,"isPbjsGeneratedType",{enumerable:true,get:function(){return de.isPbjsGeneratedType}});Object.defineProperty(oe,"isTsProtoGeneratedType",{enumerable:true,get:function(){return de.isTsProtoGeneratedType}});Object.defineProperty(oe,"isTxBodyEncodeObject",{enumerable:true,get:function(){return de.isTxBodyEncodeObject}});Object.defineProperty(oe,"Registry",{enumerable:true,get:function(){return de.Registry}});var ye=te;Object.defineProperty(oe,"isOfflineDirectSigner",{enumerable:true,get:function(){return ye.isOfflineDirectSigner}});var le=r;Object.defineProperty(oe,"makeAuthInfoBytes",{enumerable:true,get:function(){return le.makeAuthInfoBytes}});Object.defineProperty(oe,"makeSignBytes",{enumerable:true,get:function(){return le.makeSignBytes}});Object.defineProperty(oe,"makeSignDoc",{enumerable:true,get:function(){return le.makeSignDoc}});var fe=f;Object.defineProperty(oe,"executeKdf",{enumerable:true,get:function(){return fe.executeKdf}});var pe=re;Object.defineProperty(oe,"coin",{enumerable:true,get:function(){return pe.coin}});Object.defineProperty(oe,"coins",{enumerable:true,get:function(){return pe.coins}});const me=oe.__esModule,be=oe.coins,ge=oe.coin,Pe=oe.executeKdf,ke=oe.makeSignDoc,he=oe.makeSignBytes,ve=oe.makeAuthInfoBytes,Te=oe.isOfflineDirectSigner,je=oe.Registry,Se=oe.isTxBodyEncodeObject,xe=oe.isTsProtoGeneratedType,Oe=oe.isPbjsGeneratedType,we=oe.encodePubkey,Be=oe.decodePubkey,$e=oe.makeCosmoshubPath,Ae=oe.DirectSecp256k1Wallet,De=oe.extractKdfConfiguration,Ce=oe.DirectSecp256k1HdWallet,Ke=oe.decodeTxRaw,Re=oe.parseCoins;export{Ce as DirectSecp256k1HdWallet,Ae as DirectSecp256k1Wallet,je as Registry,me as __esModule,ge as coin,be as coins,Be as decodePubkey,Ke as decodeTxRaw,oe as default,we as encodePubkey,Pe as executeKdf,De as extractKdfConfiguration,Te as isOfflineDirectSigner,Oe as isPbjsGeneratedType,xe as isTsProtoGeneratedType,Se as isTxBodyEncodeObject,ve as makeAuthInfoBytes,$e as makeCosmoshubPath,he as makeSignBytes,ke as makeSignDoc,Re as parseCoins};

