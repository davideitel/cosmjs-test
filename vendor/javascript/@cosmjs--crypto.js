import*as e from"@cosmjs/encoding";import*as t from"@cosmjs/utils";import*as r from"@noble/hashes/pbkdf2";import*as a from"@noble/hashes/sha512";import*as n from"crypto";import*as i from"@noble/hashes/sha256";import*as o from"@noble/hashes/sha3";import*as s from"libsodium-wrappers";import*as c from"@noble/hashes/ripemd160";import*as l from"bn.js";import*as u from"elliptic";import*as d from"@cosmjs/math";var p="default"in t?t.default:t;var h="default"in r?r.default:r;var m="default"in a?a.default:a;var f="default"in n?n.default:n;var g={};var y=g&&g.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r);Object.defineProperty(e,a,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,a){void 0===a&&(a=r);e[a]=t[r]});var b=g&&g.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:true,value:t})}:function(e,t){e.default=t});var w=g&&g.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&y(t,e,r);b(t,e);return t};Object.defineProperty(g,"__esModule",{value:true});g.pbkdf2Sha512=g.pbkdf2Sha512Noble=g.pbkdf2Sha512Crypto=g.pbkdf2Sha512Subtle=g.getSubtle=g.getCryptoModule=void 0;const v=p;const k=h;const S=m;async function getCryptoModule(){try{const e=await Promise.resolve().then((()=>w(f)));if("object"===typeof e&&Object.keys(e).length<=1)return;return e}catch(e){return}}g.getCryptoModule=getCryptoModule;async function getSubtle(){const e=globalThis;let t=e.crypto&&e.crypto.subtle;if(!t){const e=await getCryptoModule();e&&e.webcrypto&&e.webcrypto.subtle&&(t=e.webcrypto.subtle)}return t}g.getSubtle=getSubtle;async function pbkdf2Sha512Subtle(e,t,r,a,n){(0,v.assert)(e,"Argument subtle is falsy");(0,v.assert)("object"===typeof e,"Argument subtle is not of type object");(0,v.assert)("function"===typeof e.importKey,"subtle.importKey is not a function");(0,v.assert)("function"===typeof e.deriveBits,"subtle.deriveBits is not a function");return e.importKey("raw",t,{name:"PBKDF2"},false,["deriveBits"]).then((t=>e.deriveBits({name:"PBKDF2",salt:r,iterations:a,hash:{name:"SHA-512"}},t,8*n).then((e=>new Uint8Array(e)))))}g.pbkdf2Sha512Subtle=pbkdf2Sha512Subtle;async function pbkdf2Sha512Crypto(e,t,r,a,n){(0,v.assert)(e,"Argument crypto is falsy");(0,v.assert)("object"===typeof e,"Argument crypto is not of type object");(0,v.assert)("function"===typeof e.pbkdf2,"crypto.pbkdf2 is not a function");return new Promise(((i,o)=>{e.pbkdf2(t,r,a,n,"sha512",((e,t)=>{e?o(e):i(Uint8Array.from(t))}))}))}g.pbkdf2Sha512Crypto=pbkdf2Sha512Crypto;async function pbkdf2Sha512Noble(e,t,r,a){return(0,k.pbkdf2Async)(S.sha512,e,t,{c:r,dkLen:a})}g.pbkdf2Sha512Noble=pbkdf2Sha512Noble;async function pbkdf2Sha512(e,t,r,a){const n=await getSubtle();if(n)return pbkdf2Sha512Subtle(n,e,t,r,a);{const n=await getCryptoModule();return n?pbkdf2Sha512Crypto(n,e,t,r,a):pbkdf2Sha512Noble(e,t,r,a)}}g.pbkdf2Sha512=pbkdf2Sha512;var E={};Object.defineProperty(E,"__esModule",{value:true});E.toRealUint8Array=void 0;function toRealUint8Array(e){return e instanceof Uint8Array?e:Uint8Array.from(e)}E.toRealUint8Array=toRealUint8Array;var x="default"in i?i.default:i;var j="default"in a?a.default:a;var F={};Object.defineProperty(F,"__esModule",{value:true});F.sha512=F.Sha512=F.sha256=F.Sha256=void 0;const P=x;const $=j;const A=E;class Sha256$1{constructor(e){this.blockSize=64;this.impl=P.sha256.create();e&&this.update(e)}update(e){this.impl.update((0,A.toRealUint8Array)(e));return this}digest(){return this.impl.digest()}}F.Sha256=Sha256$1;function sha256$1(e){return new Sha256$1(e).digest()}F.sha256=sha256$1;class Sha512$1{constructor(e){this.blockSize=128;this.impl=$.sha512.create();e&&this.update(e)}update(e){this.impl.update((0,A.toRealUint8Array)(e));return this}digest(){return this.impl.digest()}}F.Sha512=Sha512$1;function sha512$1(e){return new Sha512$1(e).digest()}F.sha512=sha512$1;var _="default"in e?e.default:e;var O={};Object.defineProperty(O,"__esModule",{value:true});O.Bip39=O.EnglishMnemonic=O.mnemonicToEntropy=O.entropyToMnemonic=void 0;const M=_;const B=g;const z=F;const U=["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"];function bytesToBitstring(e){return Array.from(e).map((e=>e.toString(2).padStart(8,"0"))).join("")}function deriveChecksumBits(e){const t=8*e.length;const r=t/32;const a=(0,z.sha256)(e);return bytesToBitstring(a).slice(0,r)}function bitstringToByte(e){return parseInt(e,2)}const R=[16,20,24,28,32];const C=[12,15,18,21,24];function entropyToMnemonic(e){if(-1===R.indexOf(e.length))throw new Error("invalid input length");const t=bytesToBitstring(e);const r=deriveChecksumBits(e);const a=t+r;const n=a.match(/(.{11})/g);const i=n.map((e=>{const t=bitstringToByte(e);return U[t]}));return i.join(" ")}O.entropyToMnemonic=entropyToMnemonic;const T="Invalid number of words";const I="Found word that is not in the wordlist";const K="Invalid entropy";const N="Invalid mnemonic checksum";function normalize(e){return e.normalize("NFKD")}function mnemonicToEntropy(e){const t=normalize(e).split(" ");if(!C.includes(t.length))throw new Error(T);const r=t.map((e=>{const t=U.indexOf(e);if(-1===t)throw new Error(I);return t.toString(2).padStart(11,"0")})).join("");const a=32*Math.floor(r.length/33);const n=r.slice(0,a);const i=r.slice(a);const o=n.match(/(.{1,8})/g).map(bitstringToByte);if(o.length<16||o.length>32||o.length%4!==0)throw new Error(K);const s=Uint8Array.from(o);const c=deriveChecksumBits(s);if(c!==i)throw new Error(N);return s}O.mnemonicToEntropy=mnemonicToEntropy;class EnglishMnemonic$1{constructor(e){if(!EnglishMnemonic$1.mnemonicMatcher.test(e))throw new Error("Invalid mnemonic format");const t=e.split(" ");const r=[12,15,18,21,24];if(-1===r.indexOf(t.length))throw new Error(`Invalid word count in mnemonic (allowed: ${r} got: ${t.length})`);for(const e of t)if(-1===EnglishMnemonic$1.wordlist.indexOf(e))throw new Error("Mnemonic contains invalid word");mnemonicToEntropy(e);this.data=e}toString(){return this.data}}O.EnglishMnemonic=EnglishMnemonic$1;EnglishMnemonic$1.wordlist=U;EnglishMnemonic$1.mnemonicMatcher=/^[a-z]+( [a-z]+)*$/;class Bip39$1{
/**
   * Encodes raw entropy of length 16, 20, 24, 28 or 32 bytes as an English mnemonic between 12 and 24 words.
   *
   * | Entropy            | Words |
   * |--------------------|-------|
   * | 128 bit (16 bytes) |    12 |
   * | 160 bit (20 bytes) |    15 |
   * | 192 bit (24 bytes) |    18 |
   * | 224 bit (28 bytes) |    21 |
   * | 256 bit (32 bytes) |    24 |
   *
   *
   * @see https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#generating-the-mnemonic
   * @param entropy The entropy to be encoded. This must be cryptographically secure.
   */
static encode(e){return new EnglishMnemonic$1(entropyToMnemonic(e))}static decode(e){return mnemonicToEntropy(e.toString())}static async mnemonicToSeed(e,t){const r=(0,M.toUtf8)(normalize(e.toString()));const a="mnemonic"+(t?normalize(t):"");const n=(0,M.toUtf8)(a);return(0,B.pbkdf2Sha512)(r,n,2048,64)}}O.Bip39=Bip39$1;var L={};Object.defineProperty(L,"__esModule",{value:true});L.Hmac=void 0;class Hmac$1{constructor(e,t){const r=(new e).blockSize;this.hash=t=>(new e).update(t).digest();let a=t;a.length>r&&(a=this.hash(a));if(a.length<r){const e=new Uint8Array(r-a.length);a=new Uint8Array([...a,...e])}this.oKeyPad=a.map((e=>92^e));this.iKeyPad=a.map((e=>54^e));this.messageHasher=new e;this.blockSize=r;this.update(this.iKeyPad)}update(e){this.messageHasher.update(e);return this}digest(){const e=this.messageHasher.digest();return this.hash(new Uint8Array([...this.oKeyPad,...e]))}}L.Hmac=Hmac$1;var H="default"in o?o.default:o;var q={};Object.defineProperty(q,"__esModule",{value:true});q.keccak256=q.Keccak256=void 0;const D=H;const G=E;class Keccak256$1{constructor(e){this.blockSize=64;this.impl=D.keccak_256.create();e&&this.update(e)}update(e){this.impl.update((0,G.toRealUint8Array)(e));return this}digest(){return this.impl.digest()}}q.Keccak256=Keccak256$1;function keccak256$1(e){return new Keccak256$1(e).digest()}q.keccak256=keccak256$1;var X="default"in t?t.default:t;var Z="default"in s?s.default:s;var V={};var W=V&&V.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(V,"__esModule",{value:true});V.Xchacha20poly1305Ietf=V.xchacha20NonceLength=V.Ed25519=V.Ed25519Keypair=V.Argon2id=V.isArgon2idOptions=void 0;const J=X;const Q=W(Z);function isArgon2idOptions$1(e){return!!(0,J.isNonNullObject)(e)&&("number"===typeof e.outputLength&&("number"===typeof e.opsLimit&&"number"===typeof e.memLimitKib))}V.isArgon2idOptions=isArgon2idOptions$1;class Argon2id$1{static async execute(e,t,r){await Q.default.ready;return Q.default.crypto_pwhash(r.outputLength,e,t,r.opsLimit,1024*r.memLimitKib,Q.default.crypto_pwhash_ALG_ARGON2ID13)}}V.Argon2id=Argon2id$1;class Ed25519Keypair$1{constructor(e,t){this.privkey=e;this.pubkey=t}static fromLibsodiumPrivkey(e){if(64!==e.length)throw new Error(`Unexpected key length ${e.length}. Must be 64.`);return new Ed25519Keypair$1(e.slice(0,32),e.slice(32,64))}toLibsodiumPrivkey(){return new Uint8Array([...this.privkey,...this.pubkey])}}V.Ed25519Keypair=Ed25519Keypair$1;class Ed25519$1{static async makeKeypair(e){await Q.default.ready;const t=Q.default.crypto_sign_seed_keypair(e);return Ed25519Keypair$1.fromLibsodiumPrivkey(t.privateKey)}static async createSignature(e,t){await Q.default.ready;return Q.default.crypto_sign_detached(e,t.toLibsodiumPrivkey())}static async verifySignature(e,t,r){await Q.default.ready;return Q.default.crypto_sign_verify_detached(e,t,r)}}V.Ed25519=Ed25519$1;V.xchacha20NonceLength=24;class Xchacha20poly1305Ietf$1{static async encrypt(e,t,r){await Q.default.ready;const a=null;return Q.default.crypto_aead_xchacha20poly1305_ietf_encrypt(e,a,null,r,t)}static async decrypt(e,t,r){await Q.default.ready;const a=null;return Q.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null,e,a,r,t)}}V.Xchacha20poly1305Ietf=Xchacha20poly1305Ietf$1;var Y="default"in n?n.default:n;var ee={};Object.defineProperty(ee,"__esModule",{value:true});ee.Random=void 0;class Random$1{static getBytes(e){try{const t="object"===typeof window?window:self;const r="undefined"!==typeof t.crypto?t.crypto:t.msCrypto;const a=new Uint8Array(e);r.getRandomValues(a);return a}catch(t){try{const t=Y;return new Uint8Array([...t.randomBytes(e)])}catch(e){throw new Error("No secure random number generator found")}}}}ee.Random=Random$1;var te="default"in c?c.default:c;var re={};Object.defineProperty(re,"__esModule",{value:true});re.ripemd160=re.Ripemd160=void 0;const ae=te;const ne=E;class Ripemd160$1{constructor(e){this.blockSize=64;this.impl=ae.ripemd160.create();e&&this.update(e)}update(e){this.impl.update((0,ne.toRealUint8Array)(e));return this}digest(){return this.impl.digest()}}re.Ripemd160=Ripemd160$1;function ripemd160$1(e){return new Ripemd160$1(e).digest()}re.ripemd160=ripemd160$1;var ie={};Object.defineProperty(ie,"__esModule",{value:true});ie.ExtendedSecp256k1Signature=ie.Secp256k1Signature=void 0;function trimLeadingNullBytes(e){let t=0;for(const r of e){if(0!==r)break;t++}return e.slice(t)}const oe=2;class Secp256k1Signature$1{constructor(e,t){if(e.length>32||0===e.length||0===e[0])throw new Error("Unsigned integer r must be encoded as unpadded big endian.");if(t.length>32||0===t.length||0===t[0])throw new Error("Unsigned integer s must be encoded as unpadded big endian.");this.data={r:e,s:t}}
/**
   * Takes the pair of integers (r, s) as 2x32 byte of binary data.
   *
   * Note: This is the format Cosmos SDK uses natively.
   *
   * @param data a 64 byte value containing integers r and s.
   */static fromFixedLength(e){if(64!==e.length)throw new Error(`Got invalid data length: ${e.length}. Expected 2x 32 bytes for the pair (r, s)`);return new Secp256k1Signature$1(trimLeadingNullBytes(e.slice(0,32)),trimLeadingNullBytes(e.slice(32,64)))}static fromDer(e){let t=0;if(48!==e[t++])throw new Error("Prefix 0x30 expected");const r=e[t++];if(e.length-t!==r)throw new Error("Data length mismatch detected");const a=e[t++];if(a!==oe)throw new Error("INTEGER tag expected");const n=e[t++];if(n>=128)throw new Error("Decoding length values above 127 not supported");const i=e.slice(t,t+n);t+=n;const o=e[t++];if(o!==oe)throw new Error("INTEGER tag expected");const s=e[t++];if(s>=128)throw new Error("Decoding length values above 127 not supported");const c=e.slice(t,t+s);t+=s;return new Secp256k1Signature$1(trimLeadingNullBytes(i),trimLeadingNullBytes(c))}r(e){if(void 0===e)return this.data.r;{const t=e-this.data.r.length;if(t<0)throw new Error("Length too small to hold parameter r");const r=new Uint8Array(t);return new Uint8Array([...r,...this.data.r])}}s(e){if(void 0===e)return this.data.s;{const t=e-this.data.s.length;if(t<0)throw new Error("Length too small to hold parameter s");const r=new Uint8Array(t);return new Uint8Array([...r,...this.data.s])}}toFixedLength(){return new Uint8Array([...this.r(32),...this.s(32)])}toDer(){const e=this.data.r[0]>=128?new Uint8Array([0,...this.data.r]):this.data.r;const t=this.data.s[0]>=128?new Uint8Array([0,...this.data.s]):this.data.s;const r=e.length;const a=t.length;const n=new Uint8Array([oe,r,...e,oe,a,...t]);return new Uint8Array([48,n.length,...n])}}ie.Secp256k1Signature=Secp256k1Signature$1;class ExtendedSecp256k1Signature$1 extends Secp256k1Signature$1{constructor(e,t,r){super(e,t);if(!Number.isInteger(r))throw new Error("The recovery parameter must be an integer.");if(r<0||r>4)throw new Error("The recovery parameter must be one of 0, 1, 2, 3.");this.recovery=r}static fromFixedLength(e){if(65!==e.length)throw new Error(`Got invalid data length ${e.length}. Expected 32 + 32 + 1`);return new ExtendedSecp256k1Signature$1(trimLeadingNullBytes(e.slice(0,32)),trimLeadingNullBytes(e.slice(32,64)),e[64])}toFixedLength(){return new Uint8Array([...this.r(32),...this.s(32),this.recovery])}}ie.ExtendedSecp256k1Signature=ExtendedSecp256k1Signature$1;var se="default"in e?e.default:e;var ce="default"in l?l.default:l;var le="default"in u?u.default:u;var ue={};var de=ue&&ue.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ue,"__esModule",{value:true});ue.Secp256k1=void 0;const pe=se;const he=de(ce);const me=de(le);const fe=ie;const ge=new me.default.ec("secp256k1");const ye=new he.default("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141","hex");class Secp256k1$1{static async makeKeypair(e){if(32!==e.length)throw new Error("input data is not a valid secp256k1 private key");const t=ge.keyFromPrivate(e);if(true!==t.validate().result)throw new Error("input data is not a valid secp256k1 private key");const r=new he.default(e);if(r.gte(ye))throw new Error("input data is not a valid secp256k1 private key");const a={privkey:(0,pe.fromHex)(t.getPrivate("hex")),pubkey:Uint8Array.from(t.getPublic("array"))};return a}static async createSignature(e,t){if(0===e.length)throw new Error("Message hash must not be empty");if(e.length>32)throw new Error("Message hash length must not exceed 32 bytes");const r=ge.keyFromPrivate(t);const{r:a,s:n,recoveryParam:i}=r.sign(e,{canonical:true});if("number"!==typeof i)throw new Error("Recovery param missing");return new fe.ExtendedSecp256k1Signature(Uint8Array.from(a.toArray()),Uint8Array.from(n.toArray()),i)}static async verifySignature(e,t,r){if(0===t.length)throw new Error("Message hash must not be empty");if(t.length>32)throw new Error("Message hash length must not exceed 32 bytes");const a=ge.keyFromPublic(r);try{return a.verify(t,e.toDer())}catch(e){return false}}static recoverPubkey(e,t){const r={r:(0,pe.toHex)(e.r()),s:(0,pe.toHex)(e.s())};const a=ge.recoverPubKey(t,r,e.recovery);const n=ge.keyFromPublic(a);return(0,pe.fromHex)(n.getPublic(false,"hex"))}static compressPubkey(e){switch(e.length){case 33:return e;case 65:return Uint8Array.from(ge.keyFromPublic(e).getPublic(true,"array"));default:throw new Error("Invalid pubkey length")}}static uncompressPubkey(e){switch(e.length){case 33:return Uint8Array.from(ge.keyFromPublic(e).getPublic(false,"array"));case 65:return e;default:throw new Error("Invalid pubkey length")}}static trimRecoveryByte(e){switch(e.length){case 64:return e;case 65:return e.slice(0,64);default:throw new Error("Invalid signature length")}}}ue.Secp256k1=Secp256k1$1;var be="default"in e?e.default:e;var we="default"in d?d.default:d;var ve="default"in l?l.default:l;var ke="default"in u?u.default:u;var Se={};var Ee=Se&&Se.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Se,"__esModule",{value:true});Se.stringToPath=Se.pathToString=Se.Slip10=Se.Slip10RawIndex=Se.slip10CurveFromString=Se.Slip10Curve=void 0;const xe=be;const je=we;const Fe=Ee(ve);const Pe=Ee(ke);const $e=L;const Ae=F;var _e;(function(e){e.Secp256k1="Bitcoin seed";e.Ed25519="ed25519 seed"})(_e=Se.Slip10Curve||(Se.Slip10Curve={}));function slip10CurveFromString$1(e){switch(e){case _e.Ed25519:return _e.Ed25519;case _e.Secp256k1:return _e.Secp256k1;default:throw new Error(`Unknown curve string: '${e}'`)}}Se.slip10CurveFromString=slip10CurveFromString$1;class Slip10RawIndex$1 extends je.Uint32{static hardened(e){return new Slip10RawIndex$1(e+2**31)}static normal(e){return new Slip10RawIndex$1(e)}isHardened(){return this.data>=2**31}}Se.Slip10RawIndex=Slip10RawIndex$1;const Oe=new Pe.default.ec("secp256k1");class Slip10$1{static derivePath(e,t,r){let a=this.master(e,t);for(const t of r)a=this.child(e,a.privkey,a.chainCode,t);return a}static master(e,t){const r=new $e.Hmac(Ae.Sha512,(0,xe.toAscii)(e)).update(t).digest();const a=r.slice(0,32);const n=r.slice(32,64);return e!==_e.Ed25519&&(this.isZero(a)||this.isGteN(e,a))?this.master(e,r):{chainCode:n,privkey:a}}static child(e,t,r,a){let n;if(a.isHardened()){const e=new Uint8Array([0,...t,...a.toBytesBigEndian()]);n=new $e.Hmac(Ae.Sha512,r).update(e).digest()}else{if(e===_e.Ed25519)throw new Error("Normal keys are not allowed with ed25519");{const i=new Uint8Array([...Slip10$1.serializedPoint(e,new Fe.default(t)),...a.toBytesBigEndian()]);n=new $e.Hmac(Ae.Sha512,r).update(i).digest()}}return this.childImpl(e,t,r,a,n)}static serializedPoint(e,t){switch(e){case _e.Secp256k1:return(0,xe.fromHex)(Oe.g.mul(t).encodeCompressed("hex"));default:throw new Error("curve not supported")}}static childImpl(e,t,r,a,n){const i=n.slice(0,32);const o=n.slice(32,64);const s=o;if(e===_e.Ed25519)return{chainCode:s,privkey:i};const c=this.n(e);const l=new Fe.default(i).add(new Fe.default(t)).mod(c);const u=Uint8Array.from(l.toArray("be",32));if(this.isGteN(e,i)||this.isZero(u)){const n=new $e.Hmac(Ae.Sha512,r).update(new Uint8Array([1,...o,...a.toBytesBigEndian()])).digest();return this.childImpl(e,t,r,a,n)}return{chainCode:s,privkey:u}}static isZero(e){return e.every((e=>0===e))}static isGteN(e,t){const r=new Fe.default(t);return r.gte(this.n(e))}static n(e){switch(e){case _e.Secp256k1:return new Fe.default("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141",16);default:throw new Error("curve not supported")}}}Se.Slip10=Slip10$1;function pathToString$1(e){return e.reduce(((e,t)=>{const r=t.isHardened()?t.toNumber()-2**31+"'":t.toString();return e+"/"+r}),"m")}Se.pathToString=pathToString$1;function stringToPath$1(e){if(!e.startsWith("m"))throw new Error("Path string must start with 'm'");let t=e.slice(1);const r=new Array;while(t){const e=t.match(/^\/([0-9]+)('?)/);if(!e)throw new Error("Syntax error while reading path component");const[a,n,i]=e;const o=je.Uint53.fromString(n).toNumber();if(o>=2**31)throw new Error("Component value too high. Must not exceed 2**31-1.");i?r.push(Slip10RawIndex$1.hardened(o)):r.push(Slip10RawIndex$1.normal(o));t=t.slice(a.length)}return r}Se.stringToPath=stringToPath$1;var Me={};Object.defineProperty(Me,"__esModule",{value:true});Me.stringToPath=Me.Slip10RawIndex=Me.slip10CurveFromString=Me.Slip10Curve=Me.Slip10=Me.pathToString=Me.sha512=Me.Sha512=Me.sha256=Me.Sha256=Me.Secp256k1Signature=Me.ExtendedSecp256k1Signature=Me.Secp256k1=Me.ripemd160=Me.Ripemd160=Me.Random=Me.Xchacha20poly1305Ietf=Me.xchacha20NonceLength=Me.isArgon2idOptions=Me.Ed25519Keypair=Me.Ed25519=Me.Argon2id=Me.keccak256=Me.Keccak256=Me.Hmac=Me.EnglishMnemonic=Me.Bip39=void 0;var Be=O;Object.defineProperty(Me,"Bip39",{enumerable:true,get:function(){return Be.Bip39}});Object.defineProperty(Me,"EnglishMnemonic",{enumerable:true,get:function(){return Be.EnglishMnemonic}});var ze=L;Object.defineProperty(Me,"Hmac",{enumerable:true,get:function(){return ze.Hmac}});var Ue=q;Object.defineProperty(Me,"Keccak256",{enumerable:true,get:function(){return Ue.Keccak256}});Object.defineProperty(Me,"keccak256",{enumerable:true,get:function(){return Ue.keccak256}});var Re=V;Object.defineProperty(Me,"Argon2id",{enumerable:true,get:function(){return Re.Argon2id}});Object.defineProperty(Me,"Ed25519",{enumerable:true,get:function(){return Re.Ed25519}});Object.defineProperty(Me,"Ed25519Keypair",{enumerable:true,get:function(){return Re.Ed25519Keypair}});Object.defineProperty(Me,"isArgon2idOptions",{enumerable:true,get:function(){return Re.isArgon2idOptions}});Object.defineProperty(Me,"xchacha20NonceLength",{enumerable:true,get:function(){return Re.xchacha20NonceLength}});Object.defineProperty(Me,"Xchacha20poly1305Ietf",{enumerable:true,get:function(){return Re.Xchacha20poly1305Ietf}});var Ce=ee;Object.defineProperty(Me,"Random",{enumerable:true,get:function(){return Ce.Random}});var Te=re;Object.defineProperty(Me,"Ripemd160",{enumerable:true,get:function(){return Te.Ripemd160}});Object.defineProperty(Me,"ripemd160",{enumerable:true,get:function(){return Te.ripemd160}});var Ie=ue;Object.defineProperty(Me,"Secp256k1",{enumerable:true,get:function(){return Ie.Secp256k1}});var Ke=ie;Object.defineProperty(Me,"ExtendedSecp256k1Signature",{enumerable:true,get:function(){return Ke.ExtendedSecp256k1Signature}});Object.defineProperty(Me,"Secp256k1Signature",{enumerable:true,get:function(){return Ke.Secp256k1Signature}});var Ne=F;Object.defineProperty(Me,"Sha256",{enumerable:true,get:function(){return Ne.Sha256}});Object.defineProperty(Me,"sha256",{enumerable:true,get:function(){return Ne.sha256}});Object.defineProperty(Me,"Sha512",{enumerable:true,get:function(){return Ne.Sha512}});Object.defineProperty(Me,"sha512",{enumerable:true,get:function(){return Ne.sha512}});var Le=Se;Object.defineProperty(Me,"pathToString",{enumerable:true,get:function(){return Le.pathToString}});Object.defineProperty(Me,"Slip10",{enumerable:true,get:function(){return Le.Slip10}});Object.defineProperty(Me,"Slip10Curve",{enumerable:true,get:function(){return Le.Slip10Curve}});Object.defineProperty(Me,"slip10CurveFromString",{enumerable:true,get:function(){return Le.slip10CurveFromString}});Object.defineProperty(Me,"Slip10RawIndex",{enumerable:true,get:function(){return Le.Slip10RawIndex}});Object.defineProperty(Me,"stringToPath",{enumerable:true,get:function(){return Le.stringToPath}});const He=Me.__esModule,qe=Me.stringToPath,De=Me.Slip10RawIndex,Ge=Me.slip10CurveFromString,Xe=Me.Slip10Curve,Ze=Me.Slip10,Ve=Me.pathToString,We=Me.sha512,Je=Me.Sha512,Qe=Me.sha256,Ye=Me.Sha256,et=Me.Secp256k1Signature,tt=Me.ExtendedSecp256k1Signature,rt=Me.Secp256k1,at=Me.ripemd160,nt=Me.Ripemd160,it=Me.Random,ot=Me.Xchacha20poly1305Ietf,st=Me.xchacha20NonceLength,ct=Me.isArgon2idOptions,lt=Me.Ed25519Keypair,ut=Me.Ed25519,dt=Me.Argon2id,pt=Me.keccak256,ht=Me.Keccak256,mt=Me.Hmac,ft=Me.EnglishMnemonic,gt=Me.Bip39;export{dt as Argon2id,gt as Bip39,ut as Ed25519,lt as Ed25519Keypair,ft as EnglishMnemonic,tt as ExtendedSecp256k1Signature,mt as Hmac,ht as Keccak256,it as Random,nt as Ripemd160,rt as Secp256k1,et as Secp256k1Signature,Ye as Sha256,Je as Sha512,Ze as Slip10,Xe as Slip10Curve,De as Slip10RawIndex,ot as Xchacha20poly1305Ietf,He as __esModule,Me as default,ct as isArgon2idOptions,pt as keccak256,Ve as pathToString,at as ripemd160,Qe as sha256,We as sha512,Ge as slip10CurveFromString,qe as stringToPath,st as xchacha20NonceLength};

