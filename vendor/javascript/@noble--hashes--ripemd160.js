import t from"./_sha2.js";import s from"./utils.js";import"@noble/hashes/crypto";var h={};Object.defineProperty(h,"__esModule",{value:true});h.ripemd160=h.RIPEMD160=void 0;const e=t;const r=s;const o=new Uint8Array([7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8]);const n=Uint8Array.from({length:16},((t,s)=>s));const i=n.map((t=>(9*t+5)%16));let c=[n];let a=[i];for(let t=0;t<4;t++)for(let s of[c,a])s.push(s[t].map((t=>o[t])));const l=[[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8],[12,13,11,15,6,9,9,7,12,15,11,13,7,8,7,7],[13,15,14,11,7,7,6,8,13,14,13,12,5,5,6,9],[14,11,12,14,8,6,5,5,15,12,15,14,9,9,8,6],[15,12,13,13,9,5,8,6,14,11,12,11,8,6,5,5]].map((t=>new Uint8Array(t)));const p=c.map(((t,s)=>t.map((t=>l[s][t]))));const u=a.map(((t,s)=>t.map((t=>l[s][t]))));const m=new Uint32Array([0,1518500249,1859775393,2400959708,2840853838]);const d=new Uint32Array([1352829926,1548603684,1836072691,2053994217,0]);const rotl=(t,s)=>t<<s|t>>>32-s;function f(t,s,h,e){return 0===t?s^h^e:1===t?s&h|~s&e:2===t?(s|~h)^e:3===t?s&e|h&~e:s^(h|~e)}const y=new Uint32Array(16);class RIPEMD160 extends e.SHA2{constructor(){super(64,20,8,true);this.h0=1732584193;this.h1=-271733879;this.h2=-1732584194;this.h3=271733878;this.h4=-1009589776}get(){const{h0:t,h1:s,h2:h,h3:e,h4:r}=this;return[t,s,h,e,r]}set(t,s,h,e,r){this.h0=0|t;this.h1=0|s;this.h2=0|h;this.h3=0|e;this.h4=0|r}process(t,s){for(let h=0;h<16;h++,s+=4)y[h]=t.getUint32(s,true);let h=0|this.h0,e=h,r=0|this.h1,o=r,n=0|this.h2,i=n,l=0|this.h3,M=l,P=0|this.h4,w=P;for(let t=0;t<5;t++){const s=4-t;const A=m[t],D=d[t];const E=c[t],I=a[t];const R=p[t],U=u[t];for(let s=0;s<16;s++){const e=rotl(h+f(t,r,n,l)+y[E[s]]+A,R[s])+P|0;h=P,P=l,l=0|rotl(n,10),n=r,r=e}for(let t=0;t<16;t++){const h=rotl(e+f(s,o,i,M)+y[I[t]]+D,U[t])+w|0;e=w,w=M,M=0|rotl(i,10),i=o,o=h}}this.set(this.h1+n+M|0,this.h2+l+w|0,this.h3+P+e|0,this.h4+h+o|0,this.h0+r+i|0)}roundClean(){y.fill(0)}destroy(){this.destroyed=true;this.buffer.fill(0);this.set(0,0,0,0,0)}}h.RIPEMD160=RIPEMD160;
/**
 * RIPEMD-160 - a hash function from 1990s.
 * @param message - msg that would be hashed
 */h.ripemd160=(0,r.wrapConstructor)((()=>new RIPEMD160));const M=h.__esModule,P=h.ripemd160;const w=h.RIPEMD160;export{w as RIPEMD160,M as __esModule,h as default,P as ripemd160};

