import*as e from"xstream";var t="default"in e?e.default:e;var r={};Object.defineProperty(r,"__esModule",{value:true});r.concat=void 0;const n=t;function concat$1(...e){const t=new Array;const r=new Array;const s=new Set;let u=0;function reset(){while(t.length>0){const e=t.shift();e.unsubscribe()}r.length=0;s.clear();u=0}const o={start:n=>{e.forEach((e=>r.push([])));function emitAllQueuesEvents(e){while(true){const t=r[e].shift();if(void 0===t)return;n.next(t)}}function isDone(){return u>=e.length}isDone()?n.complete():e.forEach(((e,o)=>{t.push(e.subscribe({next:e=>{o===u?n.next(e):r[o].push(e)},complete:()=>{s.add(o);while(s.has(u)){emitAllQueuesEvents(u);u++}isDone()?n.complete():emitAllQueuesEvents(u)},error:e=>{n.error(e);reset()}}))}))},stop:()=>{reset()}};return n.Stream.create(o)}r.concat=concat$1;var s={};Object.defineProperty(s,"__esModule",{value:true});s.DefaultValueProducer=void 0;class DefaultValueProducer$1{constructor(e,t){this.callbacks=t;this.internalValue=e}get value(){return this.internalValue}update(e){this.internalValue=e;this.listener&&this.listener.next(e)}error(e){this.listener&&this.listener.error(e)}start(e){this.listener=e;e.next(this.internalValue);this.callbacks&&this.callbacks.onStarted()}stop(){this.callbacks&&this.callbacks.onStop();this.listener=void 0}}s.DefaultValueProducer=DefaultValueProducer$1;var u={};Object.defineProperty(u,"__esModule",{value:true});u.dropDuplicates=void 0;function dropDuplicates$1(e){const operand=t=>{const r=new Set;const n=t.filter((t=>!r.has(e(t)))).debug((t=>r.add(e(t))));return n};return operand}u.dropDuplicates=dropDuplicates$1;var o="default"in e?e.default:e;var a={};Object.defineProperty(a,"__esModule",{value:true});a.firstEvent=a.toListPromise=a.fromListPromise=void 0;const i=o;function fromListPromise$1(e){const t={start:t=>{e.then((e=>{for(const r of e)t.next(r);t.complete()})).catch((e=>t.error(e)))},stop:()=>{}};return i.Stream.create(t)}a.fromListPromise=fromListPromise$1;async function toListPromise$1(e,t){return new Promise(((r,n)=>{if(0===t){r([]);return}const s=new Array;e.take(t).subscribe({next:e=>{s.push(e);s.length===t&&r(s)},complete:()=>{n(`Stream completed before all events could be collected. Collected ${s.length}, expected ${t}`)},error:e=>n(e)})}))}a.toListPromise=toListPromise$1;async function firstEvent$1(e){return(await toListPromise$1(e,1))[0]}a.firstEvent=firstEvent$1;var c={};Object.defineProperty(c,"__esModule",{value:true});c.lastValue=c.asArray=c.countStream=c.Reducer=void 0;class Reducer$1{constructor(e,t,r){this.stream=e;this.reducer=t;this.state=r;this.completed=new Promise(((e,t)=>{const r=this.stream.subscribe({next:e=>{this.state=this.reducer(this.state,e)},complete:()=>{e();r.unsubscribe()},error:e=>{t(e);r.unsubscribe()}})}))}value(){return this.state}async finished(){return this.completed}}c.Reducer=Reducer$1;function increment(e,t){return e+1}function countStream$1(e){return new Reducer$1(e,increment,0)}c.countStream=countStream$1;function append(e,t){return[...e,t]}function asArray$1(e){return new Reducer$1(e,append,[])}c.asArray=asArray$1;function last(e,t){return t}function lastValue$1(e){return new Reducer$1(e,last,void 0)}c.lastValue=lastValue$1;var l="default"in e?e.default:e;var d={};Object.defineProperty(d,"__esModule",{value:true});d.ValueAndUpdates=void 0;const f=l;class ValueAndUpdates$1{constructor(e){this.producer=e;this.updates=f.MemoryStream.createWithMemory(this.producer)}get value(){return this.producer.value}
/**
   * Resolves as soon as search value is found.
   *
   * @param search either a value or a function that must return true when found
   * @returns the value of the update that caused the search match
   */async waitFor(e){const t="function"===typeof e?e:t=>t===e;return new Promise(((e,r)=>{const n=this.updates.subscribe({next:r=>{if(t(r)){e(r);setTimeout((()=>n.unsubscribe()),0)}},complete:()=>{n.unsubscribe();r("Update stream completed without expected value")},error:e=>{r(e)}})}))}}d.ValueAndUpdates=ValueAndUpdates$1;var p={};var m=p&&p.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r);e[n]=t[r]});var h=p&&p.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||m(t,e,r)};Object.defineProperty(p,"__esModule",{value:true});p.ValueAndUpdates=p.toListPromise=p.fromListPromise=p.firstEvent=p.dropDuplicates=p.DefaultValueProducer=p.concat=void 0;var v=r;Object.defineProperty(p,"concat",{enumerable:true,get:function(){return v.concat}});var b=s;Object.defineProperty(p,"DefaultValueProducer",{enumerable:true,get:function(){return b.DefaultValueProducer}});var P=u;Object.defineProperty(p,"dropDuplicates",{enumerable:true,get:function(){return P.dropDuplicates}});var y=a;Object.defineProperty(p,"firstEvent",{enumerable:true,get:function(){return y.firstEvent}});Object.defineProperty(p,"fromListPromise",{enumerable:true,get:function(){return y.fromListPromise}});Object.defineProperty(p,"toListPromise",{enumerable:true,get:function(){return y.toListPromise}});h(c,p);var $=d;Object.defineProperty(p,"ValueAndUpdates",{enumerable:true,get:function(){return $.ValueAndUpdates}});const V=p.__esModule,_=p.ValueAndUpdates,A=p.toListPromise,D=p.fromListPromise,w=p.firstEvent,O=p.dropDuplicates,g=p.DefaultValueProducer,j=p.concat,L=p.lastValue,x=p.asArray,S=p.countStream,E=p.Reducer;export{g as DefaultValueProducer,E as Reducer,_ as ValueAndUpdates,V as __esModule,x as asArray,j as concat,S as countStream,p as default,O as dropDuplicates,w as firstEvent,D as fromListPromise,L as lastValue,A as toListPromise};

