import t from"./_sha2.js";import s from"./utils.js";import"@noble/hashes/crypto";var r={};Object.defineProperty(r,"__esModule",{value:true});r.sha256=void 0;const o=t;const i=s;const Chi=(t,s,r)=>t&s^~t&r;const Maj=(t,s,r)=>t&s^t&r^s&r;const e=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);const h=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]);const n=new Uint32Array(64);class SHA256 extends o.SHA2{constructor(){super(64,32,8,false);this.A=0|h[0];this.B=0|h[1];this.C=0|h[2];this.D=0|h[3];this.E=0|h[4];this.F=0|h[5];this.G=0|h[6];this.H=0|h[7]}get(){const{A:t,B:s,C:r,D:o,E:i,F:e,G:h,H:n}=this;return[t,s,r,o,i,e,h,n]}set(t,s,r,o,i,e,h,n){this.A=0|t;this.B=0|s;this.C=0|r;this.D=0|o;this.E=0|i;this.F=0|e;this.G=0|h;this.H=0|n}process(t,s){for(let r=0;r<16;r++,s+=4)n[r]=t.getUint32(s,false);for(let t=16;t<64;t++){const s=n[t-15];const r=n[t-2];const o=(0,i.rotr)(s,7)^(0,i.rotr)(s,18)^s>>>3;const e=(0,i.rotr)(r,17)^(0,i.rotr)(r,19)^r>>>10;n[t]=e+n[t-7]+o+n[t-16]|0}let{A:r,B:o,C:h,D:c,E:l,F:a,G:f,H:u}=this;for(let t=0;t<64;t++){const s=(0,i.rotr)(l,6)^(0,i.rotr)(l,11)^(0,i.rotr)(l,25);const A=u+s+Chi(l,a,f)+e[t]+n[t]|0;const p=(0,i.rotr)(r,2)^(0,i.rotr)(r,13)^(0,i.rotr)(r,22);const d=p+Maj(r,o,h)|0;u=f;f=a;a=l;l=c+A|0;c=h;h=o;o=r;r=A+d|0}r=r+this.A|0;o=o+this.B|0;h=h+this.C|0;c=c+this.D|0;l=l+this.E|0;a=a+this.F|0;f=f+this.G|0;u=u+this.H|0;this.set(r,o,h,c,l,a,f,u)}roundClean(){n.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0);this.buffer.fill(0)}}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */r.sha256=(0,i.wrapConstructor)((()=>new SHA256));const c=r.__esModule,l=r.sha256;export{c as __esModule,r as default,l as sha256};

